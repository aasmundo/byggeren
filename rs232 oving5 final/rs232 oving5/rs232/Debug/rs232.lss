
rs232.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800100  00001064  000010f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001064  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004f  008001b2  008001b2  000011aa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002e0  00000000  00000000  00001206  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002448  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fab  00000000  00000000  0000392e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d69  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000738  00000000  00000000  00005644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007b0  00000000  00000000  00005d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001316  00000000  00000000  0000652c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000278  00000000  00000000  00007842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_1>
       8:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_2>
       c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_3>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <__vector_13>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_19>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	11 e0       	ldi	r17, 0x01	; 1
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e4 e6       	ldi	r30, 0x64	; 100
      84:	f0 e1       	ldi	r31, 0x10	; 16
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a2 3b       	cpi	r26, 0xB2	; 178
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a2 eb       	ldi	r26, 0xB2	; 178
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a1 30       	cpi	r26, 0x01	; 1
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <main>
      a6:	0c 94 30 08 	jmp	0x1060	; 0x1060 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <ADC_busy>:
      ae:	80 91 b2 01 	lds	r24, 0x01B2
      b2:	08 95       	ret

000000b4 <ADC_init>:
      b4:	8b b7       	in	r24, 0x3b	; 59
      b6:	80 64       	ori	r24, 0x40	; 64
      b8:	8b bf       	out	0x3b, r24	; 59
      ba:	85 b7       	in	r24, 0x35	; 53
      bc:	82 60       	ori	r24, 0x02	; 2
      be:	85 bf       	out	0x35, r24	; 53
      c0:	85 b7       	in	r24, 0x35	; 53
      c2:	8e 7f       	andi	r24, 0xFE	; 254
      c4:	85 bf       	out	0x35, r24	; 53
      c6:	78 94       	sei
      c8:	87 e0       	ldi	r24, 0x07	; 7
      ca:	91 e0       	ldi	r25, 0x01	; 1
      cc:	0e 94 31 05 	call	0xa62	; 0xa62 <puts>
      d0:	08 95       	ret

000000d2 <ADC_read>:
      d2:	cf 93       	push	r28
      d4:	c8 2f       	mov	r28, r24
      d6:	8f ef       	ldi	r24, 0xFF	; 255
      d8:	8c 0f       	add	r24, r28
      da:	84 30       	cpi	r24, 0x04	; 4
      dc:	68 f0       	brcs	.+26     	; 0xf8 <ADC_read+0x26>
      de:	1f 92       	push	r1
      e0:	cf 93       	push	r28
      e2:	88 e1       	ldi	r24, 0x18	; 24
      e4:	91 e0       	ldi	r25, 0x01	; 1
      e6:	9f 93       	push	r25
      e8:	8f 93       	push	r24
      ea:	0e 94 1d 05 	call	0xa3a	; 0xa3a <printf>
      ee:	0f 90       	pop	r0
      f0:	0f 90       	pop	r0
      f2:	0f 90       	pop	r0
      f4:	0f 90       	pop	r0
      f6:	0a c0       	rjmp	.+20     	; 0x10c <ADC_read+0x3a>
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	0e 94 57 00 	call	0xae	; 0xae <ADC_busy>
     100:	83 e0       	ldi	r24, 0x03	; 3
     102:	8c 0f       	add	r24, r28
     104:	80 93 00 14 	sts	0x1400, r24
     108:	c0 93 06 01 	sts	0x0106, r28
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <CAN_init>:
#define RXB0CTRL			0x60
 

void CAN_init()
{
		MCP2515_reset(); 
     110:	0e 94 44 02 	call	0x488	; 0x488 <MCP2515_reset>
		
		MCP2515_bit_modify(CANINTE, 0b00000011, 0b11111111); //skrur på RX buffer interrupt
     114:	4f ef       	ldi	r20, 0xFF	; 255
     116:	63 e0       	ldi	r22, 0x03	; 3
     118:	8b e2       	ldi	r24, 0x2B	; 43
     11a:	0e 94 2a 02 	call	0x454	; 0x454 <MCP2515_bit_modify>
		//MCP2515_bit_modify(TXB0CTRL, 0b00000011, 0b11111111); //setter prio til highest message priority
		MCP2515_bit_modify(RXB0CTRL, 0b01100100, 0b11111111); //skrur av filtrering av mottatte meldinger og setter paa rx0 til rx1 overflow
     11e:	4f ef       	ldi	r20, 0xFF	; 255
     120:	64 e6       	ldi	r22, 0x64	; 100
     122:	80 e6       	ldi	r24, 0x60	; 96
     124:	0e 94 2a 02 	call	0x454	; 0x454 <MCP2515_bit_modify>
		MCP2515_bit_modify(RXB1CTRL, 0b01100000, 0b11111111); // skrur av filtrering for rx1
     128:	4f ef       	ldi	r20, 0xFF	; 255
     12a:	60 e6       	ldi	r22, 0x60	; 96
     12c:	80 e7       	ldi	r24, 0x70	; 112
     12e:	0e 94 2a 02 	call	0x454	; 0x454 <MCP2515_bit_modify>
		//MCP2515_bit_modify(CANCTRL, 0b11100000, 0b01000000); //setter i loopback mode
		MCP2515_bit_modify(CANCTRL, 0b11100011, 0b00000011); //setter i normal mode
     132:	43 e0       	ldi	r20, 0x03	; 3
     134:	63 ee       	ldi	r22, 0xE3	; 227
     136:	8f e0       	ldi	r24, 0x0F	; 15
     138:	0e 94 2a 02 	call	0x454	; 0x454 <MCP2515_bit_modify>
		printf("CAN initialized \n");
     13c:	89 e3       	ldi	r24, 0x39	; 57
     13e:	91 e0       	ldi	r25, 0x01	; 1
     140:	0e 94 31 05 	call	0xa62	; 0xa62 <puts>
     144:	08 95       	ret

00000146 <CAN_send>:
		
}


void CAN_send(union can_msg_t msg)
{
     146:	cf 92       	push	r12
     148:	df 92       	push	r13
     14a:	ef 92       	push	r14
     14c:	ff 92       	push	r15
     14e:	0f 93       	push	r16
     150:	1f 93       	push	r17
     152:	cf 93       	push	r28
     154:	df 93       	push	r29
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	2e 97       	sbiw	r28, 0x0e	; 14
     15c:	0f b6       	in	r0, 0x3f	; 63
     15e:	f8 94       	cli
     160:	de bf       	out	0x3e, r29	; 62
     162:	0f be       	out	0x3f, r0	; 63
     164:	cd bf       	out	0x3d, r28	; 61
     166:	ca 82       	std	Y+2, r12	; 0x02
     168:	db 82       	std	Y+3, r13	; 0x03
     16a:	ec 82       	std	Y+4, r14	; 0x04
     16c:	fd 82       	std	Y+5, r15	; 0x05
     16e:	0e 83       	std	Y+6, r16	; 0x06
     170:	1f 83       	std	Y+7, r17	; 0x07
     172:	28 87       	std	Y+8, r18	; 0x08
     174:	39 87       	std	Y+9, r19	; 0x09
     176:	4a 87       	std	Y+10, r20	; 0x0a
     178:	5b 87       	std	Y+11, r21	; 0x0b
     17a:	6c 87       	std	Y+12, r22	; 0x0c
     17c:	7d 87       	std	Y+13, r23	; 0x0d
     17e:	8e 87       	std	Y+14, r24	; 0x0e
     180:	ea 80       	ldd	r14, Y+2	; 0x02
     182:	fb 80       	ldd	r15, Y+3	; 0x03
	uint16_t temp = msg.package.id << 13;
	uint8_t ID_bits = temp >> 8;
	MCP2515_write(TXB0SIDL,ID_bits & 0xE0);
     184:	6e 2d       	mov	r22, r14
     186:	62 95       	swap	r22
     188:	66 0f       	add	r22, r22
     18a:	60 7e       	andi	r22, 0xE0	; 224
     18c:	82 e3       	ldi	r24, 0x32	; 50
     18e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_write>
	volatile uint8_t lol = MCP2515_read(TXB0SIDL);
     192:	82 e3       	ldi	r24, 0x32	; 50
     194:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     198:	89 83       	std	Y+1, r24	; 0x01
	ID_bits = msg.package.id >> 3;
     19a:	b7 01       	movw	r22, r14
     19c:	76 95       	lsr	r23
     19e:	67 95       	ror	r22
     1a0:	76 95       	lsr	r23
     1a2:	67 95       	ror	r22
     1a4:	76 95       	lsr	r23
     1a6:	67 95       	ror	r22
	MCP2515_write(TXB0SIDH,ID_bits);
     1a8:	81 e3       	ldi	r24, 0x31	; 49
     1aa:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_write>
	lol = MCP2515_read(TXB0SIDH);
     1ae:	81 e3       	ldi	r24, 0x31	; 49
     1b0:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     1b4:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_write(TXB0DLC,msg.package.dlc & 0x0F);
     1b6:	60 2f       	mov	r22, r16
     1b8:	6f 70       	andi	r22, 0x0F	; 15
     1ba:	85 e3       	ldi	r24, 0x35	; 53
     1bc:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_write>
	lol = MCP2515_read(TXB0DLC);
     1c0:	85 e3       	ldi	r24, 0x35	; 53
     1c2:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     1c6:	89 83       	std	Y+1, r24	; 0x01
	
	for(uint8_t i=0;i<msg.package.dlc;i++)
     1c8:	00 23       	and	r16, r16
     1ca:	79 f0       	breq	.+30     	; 0x1ea <CAN_send+0xa4>
     1cc:	7e 01       	movw	r14, r28
     1ce:	87 e0       	ldi	r24, 0x07	; 7
     1d0:	e8 0e       	add	r14, r24
     1d2:	f1 1c       	adc	r15, r1
     1d4:	0a 5c       	subi	r16, 0xCA	; 202
     1d6:	16 e3       	ldi	r17, 0x36	; 54
	{
		MCP2515_write(TXB0D0 + i, msg.package.data[i]);
     1d8:	f7 01       	movw	r30, r14
     1da:	61 91       	ld	r22, Z+
     1dc:	7f 01       	movw	r14, r30
     1de:	81 2f       	mov	r24, r17
     1e0:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_write>
     1e4:	1f 5f       	subi	r17, 0xFF	; 255
	MCP2515_write(TXB0SIDH,ID_bits);
	lol = MCP2515_read(TXB0SIDH);
	MCP2515_write(TXB0DLC,msg.package.dlc & 0x0F);
	lol = MCP2515_read(TXB0DLC);
	
	for(uint8_t i=0;i<msg.package.dlc;i++)
     1e6:	10 13       	cpse	r17, r16
     1e8:	f7 cf       	rjmp	.-18     	; 0x1d8 <CAN_send+0x92>
	{
		MCP2515_write(TXB0D0 + i, msg.package.data[i]);
	}
	lol = MCP2515_read(TXB0DLC);
     1ea:	85 e3       	ldi	r24, 0x35	; 53
     1ec:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     1f0:	89 83       	std	Y+1, r24	; 0x01
	MCP2515_RTS(0);	
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	0e 94 16 02 	call	0x42c	; 0x42c <MCP2515_RTS>
}
     1f8:	2e 96       	adiw	r28, 0x0e	; 14
     1fa:	0f b6       	in	r0, 0x3f	; 63
     1fc:	f8 94       	cli
     1fe:	de bf       	out	0x3e, r29	; 62
     200:	0f be       	out	0x3f, r0	; 63
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	1f 91       	pop	r17
     20a:	0f 91       	pop	r16
     20c:	ff 90       	pop	r15
     20e:	ef 90       	pop	r14
     210:	df 90       	pop	r13
     212:	cf 90       	pop	r12
     214:	08 95       	ret

00000216 <CAN_receive>:

union can_msg_t CAN_receive()
{
     216:	1f 93       	push	r17
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
	uint8_t CANINTF_copy = MCP2515_read(CANINTF);
     21e:	8c e2       	ldi	r24, 0x2C	; 44
     220:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
	uint8_t RX_num;
	if(test_bit(CANINTF_copy, RX0IF))
     224:	80 fd       	sbrc	r24, 0
     226:	0f c0       	rjmp	.+30     	; 0x246 <CAN_receive+0x30>
	{
		RX_num = 0;
	}else if(test_bit(CANINTF_copy, RX1IF))
     228:	81 fd       	sbrc	r24, 1
     22a:	0f c0       	rjmp	.+30     	; 0x24a <CAN_receive+0x34>
	{
		RX_num = 1;
	}else
	{
		printf("Error, INT2, ingen av int flaggene i CAN var satt :S, %x \n", CANINTF_copy);
     22c:	1f 92       	push	r1
     22e:	8f 93       	push	r24
     230:	8a e4       	ldi	r24, 0x4A	; 74
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	9f 93       	push	r25
     236:	8f 93       	push	r24
     238:	0e 94 1d 05 	call	0xa3a	; 0xa3a <printf>
     23c:	0f 90       	pop	r0
     23e:	0f 90       	pop	r0
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	03 c0       	rjmp	.+6      	; 0x24c <CAN_receive+0x36>
{
	uint8_t CANINTF_copy = MCP2515_read(CANINTF);
	uint8_t RX_num;
	if(test_bit(CANINTF_copy, RX0IF))
	{
		RX_num = 0;
     246:	10 e0       	ldi	r17, 0x00	; 0
     248:	01 c0       	rjmp	.+2      	; 0x24c <CAN_receive+0x36>
	}else if(test_bit(CANINTF_copy, RX1IF))
	{
		RX_num = 1;
     24a:	11 e0       	ldi	r17, 0x01	; 1
	}else
	{
		printf("Error, INT2, ingen av int flaggene i CAN var satt :S, %x \n", CANINTF_copy);
	}
	
	return MCP2515_RX_read(RX_num);
     24c:	61 2f       	mov	r22, r17
     24e:	ce 01       	movw	r24, r28
     250:	0e 94 6f 01 	call	0x2de	; 0x2de <MCP2515_RX_read>
}
     254:	ce 01       	movw	r24, r28
     256:	df 91       	pop	r29
     258:	cf 91       	pop	r28
     25a:	1f 91       	pop	r17
     25c:	08 95       	ret

0000025e <joy_button_init>:
     25e:	8b b7       	in	r24, 0x3b	; 59
     260:	80 68       	ori	r24, 0x80	; 128
     262:	8b bf       	out	0x3b, r24	; 59
     264:	85 b7       	in	r24, 0x35	; 53
     266:	88 60       	ori	r24, 0x08	; 8
     268:	85 bf       	out	0x35, r24	; 53
     26a:	85 b7       	in	r24, 0x35	; 53
     26c:	8b 7f       	andi	r24, 0xFB	; 251
     26e:	85 bf       	out	0x35, r24	; 53
     270:	78 94       	sei
     272:	85 e8       	ldi	r24, 0x85	; 133
     274:	91 e0       	ldi	r25, 0x01	; 1
     276:	0e 94 31 05 	call	0xa62	; 0xa62 <puts>
     27a:	08 95       	ret

0000027c <x_pos>:
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_read>
     284:	08 95       	ret

00000286 <y_pos>:
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	0e 94 69 00 	call	0xd2	; 0xd2 <ADC_read>
     28e:	08 95       	ret

00000290 <MCP2515_read>:
#include "MCP2515.h"
#include "SPI.h"
#include "CAN.h"

uint8_t MCP2515_read(uint8_t address)
{
     290:	cf 93       	push	r28
     292:	c8 2f       	mov	r28, r24
	SPI_CS_low();
     294:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
	SPI_data(0x03);
     298:	83 e0       	ldi	r24, 0x03	; 3
     29a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_data(address);
     29e:	8c 2f       	mov	r24, r28
     2a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	uint8_t temp = SPI_data(address);
     2a4:	8c 2f       	mov	r24, r28
     2a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
     2aa:	c8 2f       	mov	r28, r24
	SPI_CS_high();
     2ac:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
	return temp;
}
     2b0:	8c 2f       	mov	r24, r28
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <MCP2515_write>:
	return mesg;
}
	

void MCP2515_write(uint8_t address, uint8_t data)
{
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
     2ba:	d8 2f       	mov	r29, r24
     2bc:	c6 2f       	mov	r28, r22
	SPI_CS_low();
     2be:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
	SPI_data(0x02);
     2c2:	82 e0       	ldi	r24, 0x02	; 2
     2c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_data(address);
     2c8:	8d 2f       	mov	r24, r29
     2ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_data(data);
     2ce:	8c 2f       	mov	r24, r28
     2d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_CS_high();
     2d4:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <MCP2515_RX_read>:
	SPI_CS_high();
	return msg;
}*/

union can_msg_t MCP2515_RX_read(uint8_t RX_num)
{
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	6a 97       	sbiw	r28, 0x1a	; 26
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	7c 01       	movw	r14, r24
	volatile union can_msg_t mesg = {{0}};
     2fc:	8d e0       	ldi	r24, 0x0D	; 13
     2fe:	fe 01       	movw	r30, r28
     300:	31 96       	adiw	r30, 0x01	; 1
     302:	df 01       	movw	r26, r30
     304:	98 2f       	mov	r25, r24
     306:	1d 92       	st	X+, r1
     308:	9a 95       	dec	r25
     30a:	e9 f7       	brne	.-6      	; 0x306 <MCP2515_RX_read+0x28>
	volatile union can_msg_t mesg_tx = {{0}};	
     30c:	3d 96       	adiw	r30, 0x0d	; 13
     30e:	df 01       	movw	r26, r30
     310:	1d 92       	st	X+, r1
     312:	8a 95       	dec	r24
     314:	e9 f7       	brne	.-6      	; 0x310 <MCP2515_RX_read+0x32>
	//SPI_CS_low();
	if(RX_num == 0){
     316:	61 11       	cpse	r22, r1
     318:	5b c0       	rjmp	.+182    	; 0x3d0 <MCP2515_RX_read+0xf2>
		
		//READ RX BUFFER
		SPI_CS_low();
     31a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
			SPI_data(0x03);
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
			SPI_data(0b01100001);
     324:	81 e6       	ldi	r24, 0x61	; 97
     326:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
			for(int i = 0; i < 13; i++){
     32a:	00 e0       	ldi	r16, 0x00	; 0
     32c:	10 e0       	ldi	r17, 0x00	; 0
				mesg.array[i] = SPI_data(0b01100001+i);
     32e:	81 e6       	ldi	r24, 0x61	; 97
     330:	80 0f       	add	r24, r16
     332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
     336:	e1 e0       	ldi	r30, 0x01	; 1
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ec 0f       	add	r30, r28
     33c:	fd 1f       	adc	r31, r29
     33e:	e0 0f       	add	r30, r16
     340:	f1 1f       	adc	r31, r17
     342:	80 83       	st	Z, r24
		
		//READ RX BUFFER
		SPI_CS_low();
			SPI_data(0x03);
			SPI_data(0b01100001);
			for(int i = 0; i < 13; i++){
     344:	0f 5f       	subi	r16, 0xFF	; 255
     346:	1f 4f       	sbci	r17, 0xFF	; 255
     348:	0d 30       	cpi	r16, 0x0D	; 13
     34a:	11 05       	cpc	r17, r1
     34c:	81 f7       	brne	.-32     	; 0x32e <MCP2515_RX_read+0x50>
				mesg.array[i] = SPI_data(0b01100001+i);
			}
		SPI_CS_high();
     34e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
		
		
		mesg.package.id = ((mesg.array[0] << 8 ) | (mesg.array[1]))>> 5 & 0x7FF;
     352:	29 81       	ldd	r18, Y+1	; 0x01
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	92 2b       	or	r25, r18
     35a:	96 95       	lsr	r25
     35c:	87 95       	ror	r24
     35e:	92 95       	swap	r25
     360:	82 95       	swap	r24
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	89 27       	eor	r24, r25
     366:	9f 70       	andi	r25, 0x0F	; 15
     368:	89 27       	eor	r24, r25
     36a:	9a 83       	std	Y+2, r25	; 0x02
     36c:	89 83       	std	Y+1, r24	; 0x01
		mesg.package.dlc &= 0x0F;
     36e:	8d 81       	ldd	r24, Y+5	; 0x05
     370:	8f 70       	andi	r24, 0x0F	; 15
     372:	8d 83       	std	Y+5, r24	; 0x05
		
		//READ OLD TX BUFFER
		SPI_CS_low();
     374:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
			SPI_data(0x03);
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
			SPI_data(0b00110001);
     37e:	81 e3       	ldi	r24, 0x31	; 49
     380:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
			for(int i = 0; i < 13; i++){
     384:	00 e0       	ldi	r16, 0x00	; 0
     386:	10 e0       	ldi	r17, 0x00	; 0
				mesg_tx.array[i] = SPI_data(0x00);
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
     38e:	ee e0       	ldi	r30, 0x0E	; 14
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	ec 0f       	add	r30, r28
     394:	fd 1f       	adc	r31, r29
     396:	e0 0f       	add	r30, r16
     398:	f1 1f       	adc	r31, r17
     39a:	80 83       	st	Z, r24
		
		//READ OLD TX BUFFER
		SPI_CS_low();
			SPI_data(0x03);
			SPI_data(0b00110001);
			for(int i = 0; i < 13; i++){
     39c:	0f 5f       	subi	r16, 0xFF	; 255
     39e:	1f 4f       	sbci	r17, 0xFF	; 255
     3a0:	0d 30       	cpi	r16, 0x0D	; 13
     3a2:	11 05       	cpc	r17, r1
     3a4:	89 f7       	brne	.-30     	; 0x388 <MCP2515_RX_read+0xaa>
				mesg_tx.array[i] = SPI_data(0x00);
			}
		SPI_CS_high();
     3a6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
		
		MCP2515_write(0x2C, 0x00);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	8c e2       	ldi	r24, 0x2C	; 44
     3ae:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <MCP2515_write>
		
		mesg_tx.package.id = ((mesg_tx.array[0] << 8) | (mesg_tx.array[1]))>> 5 & 0x7FF;
     3b2:	2e 85       	ldd	r18, Y+14	; 0x0e
     3b4:	8f 85       	ldd	r24, Y+15	; 0x0f
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	92 2b       	or	r25, r18
     3ba:	96 95       	lsr	r25
     3bc:	87 95       	ror	r24
     3be:	92 95       	swap	r25
     3c0:	82 95       	swap	r24
     3c2:	8f 70       	andi	r24, 0x0F	; 15
     3c4:	89 27       	eor	r24, r25
     3c6:	9f 70       	andi	r25, 0x0F	; 15
     3c8:	89 27       	eor	r24, r25
     3ca:	9f 87       	std	Y+15, r25	; 0x0f
     3cc:	8e 87       	std	Y+14, r24	; 0x0e
     3ce:	18 c0       	rjmp	.+48     	; 0x400 <MCP2515_RX_read+0x122>
		//mesg_tx.package.dlc &= 0x0F;
		
	}
	else if(RX_num == 1){
     3d0:	61 30       	cpi	r22, 0x01	; 1
     3d2:	b1 f4       	brne	.+44     	; 0x400 <MCP2515_RX_read+0x122>
		mesg.package.id = ((MCP2515_read(0b01110001) << 8 )|  (MCP2515_read(0b01110010)) >> 5)& 0x7FF;
     3d4:	81 e7       	ldi	r24, 0x71	; 113
     3d6:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     3da:	18 2f       	mov	r17, r24
     3dc:	82 e7       	ldi	r24, 0x72	; 114
     3de:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     3e2:	82 95       	swap	r24
     3e4:	86 95       	lsr	r24
     3e6:	87 70       	andi	r24, 0x07	; 7
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	c9 01       	movw	r24, r18
     3ee:	91 2b       	or	r25, r17
     3f0:	97 70       	andi	r25, 0x07	; 7
     3f2:	9a 83       	std	Y+2, r25	; 0x02
     3f4:	89 83       	std	Y+1, r24	; 0x01
		mesg.package.dlc = MCP2515_read(0x75) & 0x0F;
     3f6:	85 e7       	ldi	r24, 0x75	; 117
     3f8:	0e 94 48 01 	call	0x290	; 0x290 <MCP2515_read>
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	
	//SPI_CS_high();
	return mesg;
     400:	8d e0       	ldi	r24, 0x0D	; 13
     402:	fe 01       	movw	r30, r28
     404:	31 96       	adiw	r30, 0x01	; 1
     406:	d7 01       	movw	r26, r14
     408:	01 90       	ld	r0, Z+
     40a:	0d 92       	st	X+, r0
     40c:	8a 95       	dec	r24
     40e:	e1 f7       	brne	.-8      	; 0x408 <MCP2515_RX_read+0x12a>
}
     410:	c7 01       	movw	r24, r14
     412:	6a 96       	adiw	r28, 0x1a	; 26
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	08 95       	ret

0000042c <MCP2515_RTS>:
	SPI_data(address);
	SPI_data(data);
	SPI_CS_high();
}
void MCP2515_RTS(uint8_t register_number)  //request to send
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	register_number = 0b10000000 + (1<<register_number);
     430:	c1 e0       	ldi	r28, 0x01	; 1
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <MCP2515_RTS+0xe>
     436:	cc 0f       	add	r28, r28
     438:	dd 1f       	adc	r29, r29
     43a:	8a 95       	dec	r24
     43c:	e2 f7       	brpl	.-8      	; 0x436 <MCP2515_RTS+0xa>
	SPI_CS_low();
     43e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
	SPI_data(register_number);
     442:	8c 2f       	mov	r24, r28
     444:	80 58       	subi	r24, 0x80	; 128
     446:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_CS_high();
     44a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
}
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	08 95       	ret

00000454 <MCP2515_bit_modify>:
	SPI_CS_high();
	return temp;
}

void MCP2515_bit_modify(uint8_t address, uint8_t mask, uint8_t data)
{
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	18 2f       	mov	r17, r24
     45c:	d6 2f       	mov	r29, r22
     45e:	c4 2f       	mov	r28, r20
	SPI_CS_low();
     460:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
	SPI_data(0x05);
     464:	85 e0       	ldi	r24, 0x05	; 5
     466:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_data(address);
     46a:	81 2f       	mov	r24, r17
     46c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_data(mask);
     470:	8d 2f       	mov	r24, r29
     472:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_data(data);
     476:	8c 2f       	mov	r24, r28
     478:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_CS_high();
     47c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	08 95       	ret

00000488 <MCP2515_reset>:

void MCP2515_reset()
{
	SPI_CS_low();
     488:	0e 94 69 03 	call	0x6d2	; 0x6d2 <SPI_CS_low>
	SPI_data(0b11000000);
     48c:	80 ec       	ldi	r24, 0xC0	; 192
     48e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <SPI_data>
	SPI_CS_high();
     492:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
     496:	08 95       	ret

00000498 <menu_init>:
uint8_t start = 0;
uint8_t stop = 7;

void menu_init()
{
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
     498:	8e b5       	in	r24, 0x2e	; 46
     49a:	88 60       	ori	r24, 0x08	; 8
     49c:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1 << OCIE1A); // Enable CTC interrupt
     49e:	89 b7       	in	r24, 0x39	; 57
     4a0:	80 64       	ori	r24, 0x40	; 64
     4a2:	89 bf       	out	0x39, r24	; 57
	OCR1A = 1600; // Set CTC compare value to 1Hz at 1MHz AVR clock, with a prescaler of 64
     4a4:	80 e4       	ldi	r24, 0x40	; 64
     4a6:	96 e0       	ldi	r25, 0x06	; 6
     4a8:	9b bd       	out	0x2b, r25	; 43
     4aa:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= ((1 << CS10) | (1 << CS11)); // Start timer at Fcpu/64
     4ac:	8e b5       	in	r24, 0x2e	; 46
     4ae:	83 60       	ori	r24, 0x03	; 3
     4b0:	8e bd       	out	0x2e, r24	; 46
     4b2:	08 95       	ret

000004b4 <main>:
volatile uint8_t button_pressed = 0;
volatile union can_msg_t message;
volatile uint8_t CAN_data_waiting = 0;
volatile uint8_t CAN_send_ready = 0;
int main(void)
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	2d 97       	sbiw	r28, 0x0d	; 13
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	f8 94       	cli
     4c2:	de bf       	out	0x3e, r29	; 62
     4c4:	0f be       	out	0x3f, r0	; 63
     4c6:	cd bf       	out	0x3d, r28	; 61
	set_bit(DDRB,DDB0);
     4c8:	b8 9a       	sbi	0x17, 0	; 23
	SPI_master_init();
     4ca:	0e 94 6d 03 	call	0x6da	; 0x6da <SPI_master_init>
	//SPI_transmit(0xAA);
	USART_Init(MYUBRR);
     4ce:	8f e1       	ldi	r24, 0x1F	; 31
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	0e 94 89 03 	call	0x712	; 0x712 <USART_Init>
	Enable_UAR0_Interrupt();
     4d6:	0e 94 98 03 	call	0x730	; 0x730 <Enable_UAR0_Interrupt>
	SRAM_init();
     4da:	0e 94 7e 03 	call	0x6fc	; 0x6fc <SRAM_init>
	ADC_init();
     4de:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_init>
	menu_init();
     4e2:	0e 94 4c 02 	call	0x498	; 0x498 <menu_init>
	joy_button_init();
     4e6:	0e 94 2f 01 	call	0x25e	; 0x25e <joy_button_init>
	CAN_init();
     4ea:	0e 94 88 00 	call	0x110	; 0x110 <CAN_init>
	

	
	
	message.package.id = 0x001;
     4ee:	81 e0       	ldi	r24, 0x01	; 1
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	90 93 b8 01 	sts	0x01B8, r25
     4f6:	80 93 b7 01 	sts	0x01B7, r24
	message.package.dlc = 3;
     4fa:	83 e0       	ldi	r24, 0x03	; 3
     4fc:	80 93 bb 01 	sts	0x01BB, r24
	message.package.eid = 0x0000;
     500:	10 92 ba 01 	sts	0x01BA, r1
     504:	10 92 b9 01 	sts	0x01B9, r1
		//_delay_ms(1000);
		if(CAN_data_waiting ==1)
		{
			CAN_data_waiting = 0;
			union can_msg_t temp = CAN_receive();
			for(int i = 0; i<13;i++)
     508:	81 2c       	mov	r8, r1
     50a:	91 2c       	mov	r9, r1
			{
				printf(" linje %i: %i \n",i,temp.array[i]);
     50c:	0f 2e       	mov	r0, r31
     50e:	f2 ea       	ldi	r31, 0xA2	; 162
     510:	af 2e       	mov	r10, r31
     512:	f1 e0       	ldi	r31, 0x01	; 1
     514:	bf 2e       	mov	r11, r31
     516:	f0 2d       	mov	r31, r0
	while(1)
	{
		
		
		//_delay_ms(1000);
		if(CAN_data_waiting ==1)
     518:	80 91 b4 01 	lds	r24, 0x01B4
     51c:	81 30       	cpi	r24, 0x01	; 1
     51e:	11 f5       	brne	.+68     	; 0x564 <__stack+0x65>
		{
			CAN_data_waiting = 0;
     520:	10 92 b4 01 	sts	0x01B4, r1
			union can_msg_t temp = CAN_receive();
     524:	ce 01       	movw	r24, r28
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	0e 94 0b 01 	call	0x216	; 0x216 <CAN_receive>
     52c:	ce 01       	movw	r24, r28
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	7c 01       	movw	r14, r24
			for(int i = 0; i<13;i++)
     532:	08 2d       	mov	r16, r8
     534:	19 2d       	mov	r17, r9
			{
				printf(" linje %i: %i \n",i,temp.array[i]);
     536:	f7 01       	movw	r30, r14
     538:	81 91       	ld	r24, Z+
     53a:	7f 01       	movw	r14, r30
     53c:	1f 92       	push	r1
     53e:	8f 93       	push	r24
     540:	1f 93       	push	r17
     542:	0f 93       	push	r16
     544:	bf 92       	push	r11
     546:	af 92       	push	r10
     548:	0e 94 1d 05 	call	0xa3a	; 0xa3a <printf>
		//_delay_ms(1000);
		if(CAN_data_waiting ==1)
		{
			CAN_data_waiting = 0;
			union can_msg_t temp = CAN_receive();
			for(int i = 0; i<13;i++)
     54c:	0f 5f       	subi	r16, 0xFF	; 255
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0d 30       	cpi	r16, 0x0D	; 13
     55e:	11 05       	cpc	r17, r1
     560:	51 f7       	brne	.-44     	; 0x536 <__stack+0x37>
     562:	da cf       	rjmp	.-76     	; 0x518 <__stack+0x19>
			{
				printf(" linje %i: %i \n",i,temp.array[i]);
			}
		}else if(CAN_send_ready == 1)
     564:	80 91 b3 01 	lds	r24, 0x01B3
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	b1 f6       	brne	.-84     	; 0x518 <__stack+0x19>
		{
			CAN_send(message);
     56c:	c0 90 b7 01 	lds	r12, 0x01B7
     570:	d0 90 b8 01 	lds	r13, 0x01B8
     574:	e0 90 b9 01 	lds	r14, 0x01B9
     578:	f0 90 ba 01 	lds	r15, 0x01BA
     57c:	00 91 bb 01 	lds	r16, 0x01BB
     580:	10 91 bc 01 	lds	r17, 0x01BC
     584:	20 91 bd 01 	lds	r18, 0x01BD
     588:	30 91 be 01 	lds	r19, 0x01BE
     58c:	40 91 bf 01 	lds	r20, 0x01BF
     590:	50 91 c0 01 	lds	r21, 0x01C0
     594:	60 91 c1 01 	lds	r22, 0x01C1
     598:	70 91 c2 01 	lds	r23, 0x01C2
     59c:	80 91 c3 01 	lds	r24, 0x01C3
     5a0:	0e 94 a3 00 	call	0x146	; 0x146 <CAN_send>
			CAN_send_ready = 0;
     5a4:	10 92 b3 01 	sts	0x01B3, r1
     5a8:	b7 cf       	rjmp	.-146    	; 0x518 <__stack+0x19>

000005aa <__vector_13>:
	}

}
/* timer interrupt ~50hz */
ISR(TIMER1_COMPA_vect)
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	11 24       	eor	r1, r1
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
	PORTB ^= 0x01; // Toggle the LED
     5cc:	98 b3       	in	r25, 0x18	; 24
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	89 27       	eor	r24, r25
     5d2:	88 bb       	out	0x18, r24	; 24
	
	if(ADC_busy() == 0)
     5d4:	0e 94 57 00 	call	0xae	; 0xae <ADC_busy>
     5d8:	81 11       	cpse	r24, r1
     5da:	19 c0       	rjmp	.+50     	; 0x60e <__vector_13+0x64>
	{
		if(toggler == 0)
     5dc:	80 91 b6 01 	lds	r24, 0x01B6
     5e0:	81 11       	cpse	r24, r1
     5e2:	03 c0       	rjmp	.+6      	; 0x5ea <__vector_13+0x40>
		{
			y_pos();
     5e4:	0e 94 43 01 	call	0x286	; 0x286 <y_pos>
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <__vector_13+0x64>
		}else if(toggler == 1)
     5ea:	80 91 b6 01 	lds	r24, 0x01B6
     5ee:	81 30       	cpi	r24, 0x01	; 1
     5f0:	19 f4       	brne	.+6      	; 0x5f8 <__vector_13+0x4e>
		{
			x_pos();
     5f2:	0e 94 3e 01 	call	0x27c	; 0x27c <x_pos>
     5f6:	0b c0       	rjmp	.+22     	; 0x60e <__vector_13+0x64>
		}else
		{
			toggler = 0;
     5f8:	10 92 b6 01 	sts	0x01B6, r1
			message.package.data[2] = button_pressed;
     5fc:	80 91 b5 01 	lds	r24, 0x01B5
     600:	80 93 be 01 	sts	0x01BE, r24
			button_pressed = 0;
     604:	10 92 b5 01 	sts	0x01B5, r1
			CAN_send_ready = 1;	
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	80 93 b3 01 	sts	0x01B3, r24
		}
			
	}
	
}
     60e:	ff 91       	pop	r31
     610:	ef 91       	pop	r30
     612:	bf 91       	pop	r27
     614:	af 91       	pop	r26
     616:	9f 91       	pop	r25
     618:	8f 91       	pop	r24
     61a:	7f 91       	pop	r23
     61c:	6f 91       	pop	r22
     61e:	5f 91       	pop	r21
     620:	4f 91       	pop	r20
     622:	3f 91       	pop	r19
     624:	2f 91       	pop	r18
     626:	0f 90       	pop	r0
     628:	0f be       	out	0x3f, r0	; 63
     62a:	0f 90       	pop	r0
     62c:	1f 90       	pop	r1
     62e:	18 95       	reti

00000630 <__vector_1>:
/* ADC interrupt */
ISR(INT0_vect){
     630:	1f 92       	push	r1
     632:	0f 92       	push	r0
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	0f 92       	push	r0
     638:	11 24       	eor	r1, r1
     63a:	2f 93       	push	r18
     63c:	3f 93       	push	r19
     63e:	4f 93       	push	r20
     640:	5f 93       	push	r21
     642:	6f 93       	push	r22
     644:	7f 93       	push	r23
     646:	8f 93       	push	r24
     648:	9f 93       	push	r25
     64a:	af 93       	push	r26
     64c:	bf 93       	push	r27
     64e:	ef 93       	push	r30
     650:	ff 93       	push	r31
	volatile char *ext_adc = (char *) 0x1403;
	message.package.data[toggler] = ext_adc[0];
     652:	e0 91 b6 01 	lds	r30, 0x01B6
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	80 91 03 14 	lds	r24, 0x1403
     65c:	e9 54       	subi	r30, 0x49	; 73
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	85 83       	std	Z+5, r24	; 0x05
	toggler++;
     662:	80 91 b6 01 	lds	r24, 0x01B6
     666:	8f 5f       	subi	r24, 0xFF	; 255
     668:	80 93 b6 01 	sts	0x01B6, r24
	ADC_busy(0);
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 57 00 	call	0xae	; 0xae <ADC_busy>
}
     674:	ff 91       	pop	r31
     676:	ef 91       	pop	r30
     678:	bf 91       	pop	r27
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0f be       	out	0x3f, r0	; 63
     690:	0f 90       	pop	r0
     692:	1f 90       	pop	r1
     694:	18 95       	reti

00000696 <__vector_2>:
/* jOYSTICK BUTTON */
ISR(INT1_vect){
     696:	1f 92       	push	r1
     698:	0f 92       	push	r0
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	0f 92       	push	r0
     69e:	11 24       	eor	r1, r1
     6a0:	8f 93       	push	r24

	button_pressed = 1;
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 b5 01 	sts	0x01B5, r24
	
	return;
}
     6a8:	8f 91       	pop	r24
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_3>:

/* CAN INTERRUPT */
ISR(INT2_vect){
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	8f 93       	push	r24
	CAN_data_waiting = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 b4 01 	sts	0x01B4, r24

     6c6:	8f 91       	pop	r24
     6c8:	0f 90       	pop	r0
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	0f 90       	pop	r0
     6ce:	1f 90       	pop	r1
     6d0:	18 95       	reti

000006d2 <SPI_CS_low>:
     6d2:	c4 98       	cbi	0x18, 4	; 24
     6d4:	08 95       	ret

000006d6 <SPI_CS_high>:
     6d6:	c4 9a       	sbi	0x18, 4	; 24
     6d8:	08 95       	ret

000006da <SPI_master_init>:
     6da:	8b b7       	in	r24, 0x3b	; 59
     6dc:	80 62       	ori	r24, 0x20	; 32
     6de:	8b bf       	out	0x3b, r24	; 59
     6e0:	bc 9a       	sbi	0x17, 4	; 23
     6e2:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <SPI_CS_high>
     6e6:	bd 9a       	sbi	0x17, 5	; 23
     6e8:	bf 9a       	sbi	0x17, 7	; 23
     6ea:	6e 9a       	sbi	0x0d, 6	; 13
     6ec:	6c 9a       	sbi	0x0d, 4	; 13
     6ee:	68 9a       	sbi	0x0d, 0	; 13
     6f0:	08 95       	ret

000006f2 <SPI_data>:
     6f2:	8f b9       	out	0x0f, r24	; 15
     6f4:	77 9b       	sbis	0x0e, 7	; 14
     6f6:	fe cf       	rjmp	.-4      	; 0x6f4 <SPI_data+0x2>
     6f8:	8f b1       	in	r24, 0x0f	; 15
     6fa:	08 95       	ret

000006fc <SRAM_init>:
     6fc:	85 b7       	in	r24, 0x35	; 53
     6fe:	80 68       	ori	r24, 0x80	; 128
     700:	85 bf       	out	0x35, r24	; 53
     702:	08 95       	ret

00000704 <USART0_Receive>:
     704:	80 91 c4 01 	lds	r24, 0x01C4
     708:	08 95       	ret

0000070a <USART0_Transmit>:
     70a:	5d 9b       	sbis	0x0b, 5	; 11
     70c:	fe cf       	rjmp	.-4      	; 0x70a <USART0_Transmit>
     70e:	8c b9       	out	0x0c, r24	; 12
     710:	08 95       	ret

00000712 <USART_Init>:
     712:	90 bd       	out	0x20, r25	; 32
     714:	89 b9       	out	0x09, r24	; 9
     716:	88 e1       	ldi	r24, 0x18	; 24
     718:	8a b9       	out	0x0a, r24	; 10
     71a:	86 e8       	ldi	r24, 0x86	; 134
     71c:	80 bd       	out	0x20, r24	; 32
     71e:	40 e0       	ldi	r20, 0x00	; 0
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	62 e8       	ldi	r22, 0x82	; 130
     724:	73 e0       	ldi	r23, 0x03	; 3
     726:	85 e8       	ldi	r24, 0x85	; 133
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <fdevopen>
     72e:	08 95       	ret

00000730 <Enable_UAR0_Interrupt>:
     730:	57 9a       	sbi	0x0a, 7	; 10
     732:	08 95       	ret

00000734 <__vector_19>:
     734:	1f 92       	push	r1
     736:	0f 92       	push	r0
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	0f 92       	push	r0
     73c:	11 24       	eor	r1, r1
     73e:	8f 93       	push	r24
     740:	8c b1       	in	r24, 0x0c	; 12
     742:	8a 30       	cpi	r24, 0x0A	; 10
     744:	11 f0       	breq	.+4      	; 0x74a <__vector_19+0x16>
     746:	80 93 c4 01 	sts	0x01C4, r24
     74a:	8f 91       	pop	r24
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	1f 90       	pop	r1
     754:	18 95       	reti

00000756 <malloc>:
     756:	cf 93       	push	r28
     758:	df 93       	push	r29
     75a:	82 30       	cpi	r24, 0x02	; 2
     75c:	91 05       	cpc	r25, r1
     75e:	10 f4       	brcc	.+4      	; 0x764 <malloc+0xe>
     760:	82 e0       	ldi	r24, 0x02	; 2
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	e0 91 f9 01 	lds	r30, 0x01F9
     768:	f0 91 fa 01 	lds	r31, 0x01FA
     76c:	20 e0       	ldi	r18, 0x00	; 0
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	a0 e0       	ldi	r26, 0x00	; 0
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	30 97       	sbiw	r30, 0x00	; 0
     776:	39 f1       	breq	.+78     	; 0x7c6 <malloc+0x70>
     778:	40 81       	ld	r20, Z
     77a:	51 81       	ldd	r21, Z+1	; 0x01
     77c:	48 17       	cp	r20, r24
     77e:	59 07       	cpc	r21, r25
     780:	b8 f0       	brcs	.+46     	; 0x7b0 <malloc+0x5a>
     782:	48 17       	cp	r20, r24
     784:	59 07       	cpc	r21, r25
     786:	71 f4       	brne	.+28     	; 0x7a4 <malloc+0x4e>
     788:	82 81       	ldd	r24, Z+2	; 0x02
     78a:	93 81       	ldd	r25, Z+3	; 0x03
     78c:	10 97       	sbiw	r26, 0x00	; 0
     78e:	29 f0       	breq	.+10     	; 0x79a <malloc+0x44>
     790:	13 96       	adiw	r26, 0x03	; 3
     792:	9c 93       	st	X, r25
     794:	8e 93       	st	-X, r24
     796:	12 97       	sbiw	r26, 0x02	; 2
     798:	2c c0       	rjmp	.+88     	; 0x7f2 <malloc+0x9c>
     79a:	90 93 fa 01 	sts	0x01FA, r25
     79e:	80 93 f9 01 	sts	0x01F9, r24
     7a2:	27 c0       	rjmp	.+78     	; 0x7f2 <malloc+0x9c>
     7a4:	21 15       	cp	r18, r1
     7a6:	31 05       	cpc	r19, r1
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <malloc+0x60>
     7aa:	42 17       	cp	r20, r18
     7ac:	53 07       	cpc	r21, r19
     7ae:	18 f0       	brcs	.+6      	; 0x7b6 <malloc+0x60>
     7b0:	a9 01       	movw	r20, r18
     7b2:	db 01       	movw	r26, r22
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <malloc+0x62>
     7b6:	ef 01       	movw	r28, r30
     7b8:	9a 01       	movw	r18, r20
     7ba:	bd 01       	movw	r22, r26
     7bc:	df 01       	movw	r26, r30
     7be:	02 80       	ldd	r0, Z+2	; 0x02
     7c0:	f3 81       	ldd	r31, Z+3	; 0x03
     7c2:	e0 2d       	mov	r30, r0
     7c4:	d7 cf       	rjmp	.-82     	; 0x774 <malloc+0x1e>
     7c6:	21 15       	cp	r18, r1
     7c8:	31 05       	cpc	r19, r1
     7ca:	f9 f0       	breq	.+62     	; 0x80a <malloc+0xb4>
     7cc:	28 1b       	sub	r18, r24
     7ce:	39 0b       	sbc	r19, r25
     7d0:	24 30       	cpi	r18, 0x04	; 4
     7d2:	31 05       	cpc	r19, r1
     7d4:	80 f4       	brcc	.+32     	; 0x7f6 <malloc+0xa0>
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	61 15       	cp	r22, r1
     7dc:	71 05       	cpc	r23, r1
     7de:	21 f0       	breq	.+8      	; 0x7e8 <malloc+0x92>
     7e0:	fb 01       	movw	r30, r22
     7e2:	93 83       	std	Z+3, r25	; 0x03
     7e4:	82 83       	std	Z+2, r24	; 0x02
     7e6:	04 c0       	rjmp	.+8      	; 0x7f0 <malloc+0x9a>
     7e8:	90 93 fa 01 	sts	0x01FA, r25
     7ec:	80 93 f9 01 	sts	0x01F9, r24
     7f0:	fe 01       	movw	r30, r28
     7f2:	32 96       	adiw	r30, 0x02	; 2
     7f4:	44 c0       	rjmp	.+136    	; 0x87e <malloc+0x128>
     7f6:	fe 01       	movw	r30, r28
     7f8:	e2 0f       	add	r30, r18
     7fa:	f3 1f       	adc	r31, r19
     7fc:	81 93       	st	Z+, r24
     7fe:	91 93       	st	Z+, r25
     800:	22 50       	subi	r18, 0x02	; 2
     802:	31 09       	sbc	r19, r1
     804:	39 83       	std	Y+1, r19	; 0x01
     806:	28 83       	st	Y, r18
     808:	3a c0       	rjmp	.+116    	; 0x87e <malloc+0x128>
     80a:	20 91 f7 01 	lds	r18, 0x01F7
     80e:	30 91 f8 01 	lds	r19, 0x01F8
     812:	23 2b       	or	r18, r19
     814:	41 f4       	brne	.+16     	; 0x826 <malloc+0xd0>
     816:	20 91 02 01 	lds	r18, 0x0102
     81a:	30 91 03 01 	lds	r19, 0x0103
     81e:	30 93 f8 01 	sts	0x01F8, r19
     822:	20 93 f7 01 	sts	0x01F7, r18
     826:	20 91 00 01 	lds	r18, 0x0100
     82a:	30 91 01 01 	lds	r19, 0x0101
     82e:	21 15       	cp	r18, r1
     830:	31 05       	cpc	r19, r1
     832:	41 f4       	brne	.+16     	; 0x844 <malloc+0xee>
     834:	2d b7       	in	r18, 0x3d	; 61
     836:	3e b7       	in	r19, 0x3e	; 62
     838:	40 91 04 01 	lds	r20, 0x0104
     83c:	50 91 05 01 	lds	r21, 0x0105
     840:	24 1b       	sub	r18, r20
     842:	35 0b       	sbc	r19, r21
     844:	e0 91 f7 01 	lds	r30, 0x01F7
     848:	f0 91 f8 01 	lds	r31, 0x01F8
     84c:	e2 17       	cp	r30, r18
     84e:	f3 07       	cpc	r31, r19
     850:	a0 f4       	brcc	.+40     	; 0x87a <malloc+0x124>
     852:	2e 1b       	sub	r18, r30
     854:	3f 0b       	sbc	r19, r31
     856:	28 17       	cp	r18, r24
     858:	39 07       	cpc	r19, r25
     85a:	78 f0       	brcs	.+30     	; 0x87a <malloc+0x124>
     85c:	ac 01       	movw	r20, r24
     85e:	4e 5f       	subi	r20, 0xFE	; 254
     860:	5f 4f       	sbci	r21, 0xFF	; 255
     862:	24 17       	cp	r18, r20
     864:	35 07       	cpc	r19, r21
     866:	48 f0       	brcs	.+18     	; 0x87a <malloc+0x124>
     868:	4e 0f       	add	r20, r30
     86a:	5f 1f       	adc	r21, r31
     86c:	50 93 f8 01 	sts	0x01F8, r21
     870:	40 93 f7 01 	sts	0x01F7, r20
     874:	81 93       	st	Z+, r24
     876:	91 93       	st	Z+, r25
     878:	02 c0       	rjmp	.+4      	; 0x87e <malloc+0x128>
     87a:	e0 e0       	ldi	r30, 0x00	; 0
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	cf 01       	movw	r24, r30
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	08 95       	ret

00000886 <free>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	00 97       	sbiw	r24, 0x00	; 0
     88c:	09 f4       	brne	.+2      	; 0x890 <free+0xa>
     88e:	87 c0       	rjmp	.+270    	; 0x99e <free+0x118>
     890:	fc 01       	movw	r30, r24
     892:	32 97       	sbiw	r30, 0x02	; 2
     894:	13 82       	std	Z+3, r1	; 0x03
     896:	12 82       	std	Z+2, r1	; 0x02
     898:	c0 91 f9 01 	lds	r28, 0x01F9
     89c:	d0 91 fa 01 	lds	r29, 0x01FA
     8a0:	20 97       	sbiw	r28, 0x00	; 0
     8a2:	81 f4       	brne	.+32     	; 0x8c4 <free+0x3e>
     8a4:	20 81       	ld	r18, Z
     8a6:	31 81       	ldd	r19, Z+1	; 0x01
     8a8:	28 0f       	add	r18, r24
     8aa:	39 1f       	adc	r19, r25
     8ac:	80 91 f7 01 	lds	r24, 0x01F7
     8b0:	90 91 f8 01 	lds	r25, 0x01F8
     8b4:	82 17       	cp	r24, r18
     8b6:	93 07       	cpc	r25, r19
     8b8:	79 f5       	brne	.+94     	; 0x918 <free+0x92>
     8ba:	f0 93 f8 01 	sts	0x01F8, r31
     8be:	e0 93 f7 01 	sts	0x01F7, r30
     8c2:	6d c0       	rjmp	.+218    	; 0x99e <free+0x118>
     8c4:	de 01       	movw	r26, r28
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	ae 17       	cp	r26, r30
     8cc:	bf 07       	cpc	r27, r31
     8ce:	50 f4       	brcc	.+20     	; 0x8e4 <free+0x5e>
     8d0:	12 96       	adiw	r26, 0x02	; 2
     8d2:	4d 91       	ld	r20, X+
     8d4:	5c 91       	ld	r21, X
     8d6:	13 97       	sbiw	r26, 0x03	; 3
     8d8:	9d 01       	movw	r18, r26
     8da:	41 15       	cp	r20, r1
     8dc:	51 05       	cpc	r21, r1
     8de:	09 f1       	breq	.+66     	; 0x922 <free+0x9c>
     8e0:	da 01       	movw	r26, r20
     8e2:	f3 cf       	rjmp	.-26     	; 0x8ca <free+0x44>
     8e4:	b3 83       	std	Z+3, r27	; 0x03
     8e6:	a2 83       	std	Z+2, r26	; 0x02
     8e8:	40 81       	ld	r20, Z
     8ea:	51 81       	ldd	r21, Z+1	; 0x01
     8ec:	84 0f       	add	r24, r20
     8ee:	95 1f       	adc	r25, r21
     8f0:	8a 17       	cp	r24, r26
     8f2:	9b 07       	cpc	r25, r27
     8f4:	71 f4       	brne	.+28     	; 0x912 <free+0x8c>
     8f6:	8d 91       	ld	r24, X+
     8f8:	9c 91       	ld	r25, X
     8fa:	11 97       	sbiw	r26, 0x01	; 1
     8fc:	84 0f       	add	r24, r20
     8fe:	95 1f       	adc	r25, r21
     900:	02 96       	adiw	r24, 0x02	; 2
     902:	91 83       	std	Z+1, r25	; 0x01
     904:	80 83       	st	Z, r24
     906:	12 96       	adiw	r26, 0x02	; 2
     908:	8d 91       	ld	r24, X+
     90a:	9c 91       	ld	r25, X
     90c:	13 97       	sbiw	r26, 0x03	; 3
     90e:	93 83       	std	Z+3, r25	; 0x03
     910:	82 83       	std	Z+2, r24	; 0x02
     912:	21 15       	cp	r18, r1
     914:	31 05       	cpc	r19, r1
     916:	29 f4       	brne	.+10     	; 0x922 <free+0x9c>
     918:	f0 93 fa 01 	sts	0x01FA, r31
     91c:	e0 93 f9 01 	sts	0x01F9, r30
     920:	3e c0       	rjmp	.+124    	; 0x99e <free+0x118>
     922:	d9 01       	movw	r26, r18
     924:	13 96       	adiw	r26, 0x03	; 3
     926:	fc 93       	st	X, r31
     928:	ee 93       	st	-X, r30
     92a:	12 97       	sbiw	r26, 0x02	; 2
     92c:	4d 91       	ld	r20, X+
     92e:	5d 91       	ld	r21, X+
     930:	a4 0f       	add	r26, r20
     932:	b5 1f       	adc	r27, r21
     934:	ea 17       	cp	r30, r26
     936:	fb 07       	cpc	r31, r27
     938:	79 f4       	brne	.+30     	; 0x958 <free+0xd2>
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	84 0f       	add	r24, r20
     940:	95 1f       	adc	r25, r21
     942:	02 96       	adiw	r24, 0x02	; 2
     944:	d9 01       	movw	r26, r18
     946:	11 96       	adiw	r26, 0x01	; 1
     948:	9c 93       	st	X, r25
     94a:	8e 93       	st	-X, r24
     94c:	82 81       	ldd	r24, Z+2	; 0x02
     94e:	93 81       	ldd	r25, Z+3	; 0x03
     950:	13 96       	adiw	r26, 0x03	; 3
     952:	9c 93       	st	X, r25
     954:	8e 93       	st	-X, r24
     956:	12 97       	sbiw	r26, 0x02	; 2
     958:	e0 e0       	ldi	r30, 0x00	; 0
     95a:	f0 e0       	ldi	r31, 0x00	; 0
     95c:	8a 81       	ldd	r24, Y+2	; 0x02
     95e:	9b 81       	ldd	r25, Y+3	; 0x03
     960:	00 97       	sbiw	r24, 0x00	; 0
     962:	19 f0       	breq	.+6      	; 0x96a <free+0xe4>
     964:	fe 01       	movw	r30, r28
     966:	ec 01       	movw	r28, r24
     968:	f9 cf       	rjmp	.-14     	; 0x95c <free+0xd6>
     96a:	ce 01       	movw	r24, r28
     96c:	02 96       	adiw	r24, 0x02	; 2
     96e:	28 81       	ld	r18, Y
     970:	39 81       	ldd	r19, Y+1	; 0x01
     972:	82 0f       	add	r24, r18
     974:	93 1f       	adc	r25, r19
     976:	20 91 f7 01 	lds	r18, 0x01F7
     97a:	30 91 f8 01 	lds	r19, 0x01F8
     97e:	28 17       	cp	r18, r24
     980:	39 07       	cpc	r19, r25
     982:	69 f4       	brne	.+26     	; 0x99e <free+0x118>
     984:	30 97       	sbiw	r30, 0x00	; 0
     986:	29 f4       	brne	.+10     	; 0x992 <free+0x10c>
     988:	10 92 fa 01 	sts	0x01FA, r1
     98c:	10 92 f9 01 	sts	0x01F9, r1
     990:	02 c0       	rjmp	.+4      	; 0x996 <free+0x110>
     992:	13 82       	std	Z+3, r1	; 0x03
     994:	12 82       	std	Z+2, r1	; 0x02
     996:	d0 93 f8 01 	sts	0x01F8, r29
     99a:	c0 93 f7 01 	sts	0x01F7, r28
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <fdevopen>:
     9a4:	0f 93       	push	r16
     9a6:	1f 93       	push	r17
     9a8:	cf 93       	push	r28
     9aa:	df 93       	push	r29
     9ac:	ec 01       	movw	r28, r24
     9ae:	8b 01       	movw	r16, r22
     9b0:	00 97       	sbiw	r24, 0x00	; 0
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <fdevopen+0x1c>
     9b4:	61 15       	cp	r22, r1
     9b6:	71 05       	cpc	r23, r1
     9b8:	19 f4       	brne	.+6      	; 0x9c0 <fdevopen+0x1c>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	38 c0       	rjmp	.+112    	; 0xa30 <fdevopen+0x8c>
     9c0:	6e e0       	ldi	r22, 0x0E	; 14
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 30 07 	call	0xe60	; 0xe60 <calloc>
     9cc:	fc 01       	movw	r30, r24
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	a1 f3       	breq	.-24     	; 0x9ba <fdevopen+0x16>
     9d2:	80 e8       	ldi	r24, 0x80	; 128
     9d4:	83 83       	std	Z+3, r24	; 0x03
     9d6:	01 15       	cp	r16, r1
     9d8:	11 05       	cpc	r17, r1
     9da:	71 f0       	breq	.+28     	; 0x9f8 <fdevopen+0x54>
     9dc:	13 87       	std	Z+11, r17	; 0x0b
     9de:	02 87       	std	Z+10, r16	; 0x0a
     9e0:	81 e8       	ldi	r24, 0x81	; 129
     9e2:	83 83       	std	Z+3, r24	; 0x03
     9e4:	80 91 fb 01 	lds	r24, 0x01FB
     9e8:	90 91 fc 01 	lds	r25, 0x01FC
     9ec:	89 2b       	or	r24, r25
     9ee:	21 f4       	brne	.+8      	; 0x9f8 <fdevopen+0x54>
     9f0:	f0 93 fc 01 	sts	0x01FC, r31
     9f4:	e0 93 fb 01 	sts	0x01FB, r30
     9f8:	20 97       	sbiw	r28, 0x00	; 0
     9fa:	c9 f0       	breq	.+50     	; 0xa2e <fdevopen+0x8a>
     9fc:	d1 87       	std	Z+9, r29	; 0x09
     9fe:	c0 87       	std	Z+8, r28	; 0x08
     a00:	83 81       	ldd	r24, Z+3	; 0x03
     a02:	82 60       	ori	r24, 0x02	; 2
     a04:	83 83       	std	Z+3, r24	; 0x03
     a06:	80 91 fd 01 	lds	r24, 0x01FD
     a0a:	90 91 fe 01 	lds	r25, 0x01FE
     a0e:	89 2b       	or	r24, r25
     a10:	71 f4       	brne	.+28     	; 0xa2e <fdevopen+0x8a>
     a12:	f0 93 fe 01 	sts	0x01FE, r31
     a16:	e0 93 fd 01 	sts	0x01FD, r30
     a1a:	80 91 ff 01 	lds	r24, 0x01FF
     a1e:	90 91 00 02 	lds	r25, 0x0200
     a22:	89 2b       	or	r24, r25
     a24:	21 f4       	brne	.+8      	; 0xa2e <fdevopen+0x8a>
     a26:	f0 93 00 02 	sts	0x0200, r31
     a2a:	e0 93 ff 01 	sts	0x01FF, r30
     a2e:	cf 01       	movw	r24, r30
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <printf>:
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	e3 e2       	ldi	r30, 0x23	; 35
     a40:	f5 e0       	ldi	r31, 0x05	; 5
     a42:	0c 94 09 08 	jmp	0x1012	; 0x1012 <__prologue_saves__+0x20>
     a46:	fe 01       	movw	r30, r28
     a48:	35 96       	adiw	r30, 0x05	; 5
     a4a:	61 91       	ld	r22, Z+
     a4c:	71 91       	ld	r23, Z+
     a4e:	af 01       	movw	r20, r30
     a50:	80 91 fd 01 	lds	r24, 0x01FD
     a54:	90 91 fe 01 	lds	r25, 0x01FE
     a58:	0e 94 5e 05 	call	0xabc	; 0xabc <vfprintf>
     a5c:	e2 e0       	ldi	r30, 0x02	; 2
     a5e:	0c 94 25 08 	jmp	0x104a	; 0x104a <__epilogue_restores__+0x20>

00000a62 <puts>:
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	e0 91 fd 01 	lds	r30, 0x01FD
     a6e:	f0 91 fe 01 	lds	r31, 0x01FE
     a72:	23 81       	ldd	r18, Z+3	; 0x03
     a74:	21 ff       	sbrs	r18, 1
     a76:	1b c0       	rjmp	.+54     	; 0xaae <puts+0x4c>
     a78:	ec 01       	movw	r28, r24
     a7a:	00 e0       	ldi	r16, 0x00	; 0
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	89 91       	ld	r24, Y+
     a80:	60 91 fd 01 	lds	r22, 0x01FD
     a84:	70 91 fe 01 	lds	r23, 0x01FE
     a88:	db 01       	movw	r26, r22
     a8a:	18 96       	adiw	r26, 0x08	; 8
     a8c:	ed 91       	ld	r30, X+
     a8e:	fc 91       	ld	r31, X
     a90:	19 97       	sbiw	r26, 0x09	; 9
     a92:	88 23       	and	r24, r24
     a94:	31 f0       	breq	.+12     	; 0xaa2 <puts+0x40>
     a96:	09 95       	icall
     a98:	89 2b       	or	r24, r25
     a9a:	89 f3       	breq	.-30     	; 0xa7e <puts+0x1c>
     a9c:	0f ef       	ldi	r16, 0xFF	; 255
     a9e:	1f ef       	ldi	r17, 0xFF	; 255
     aa0:	ee cf       	rjmp	.-36     	; 0xa7e <puts+0x1c>
     aa2:	8a e0       	ldi	r24, 0x0A	; 10
     aa4:	09 95       	icall
     aa6:	89 2b       	or	r24, r25
     aa8:	11 f4       	brne	.+4      	; 0xaae <puts+0x4c>
     aaa:	c8 01       	movw	r24, r16
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <puts+0x50>
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	9f ef       	ldi	r25, 0xFF	; 255
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	08 95       	ret

00000abc <vfprintf>:
     abc:	ac e0       	ldi	r26, 0x0C	; 12
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e4 e6       	ldi	r30, 0x64	; 100
     ac2:	f5 e0       	ldi	r31, 0x05	; 5
     ac4:	0c 94 f9 07 	jmp	0xff2	; 0xff2 <__prologue_saves__>
     ac8:	7c 01       	movw	r14, r24
     aca:	6b 01       	movw	r12, r22
     acc:	8a 01       	movw	r16, r20
     ace:	fc 01       	movw	r30, r24
     ad0:	17 82       	std	Z+7, r1	; 0x07
     ad2:	16 82       	std	Z+6, r1	; 0x06
     ad4:	83 81       	ldd	r24, Z+3	; 0x03
     ad6:	81 ff       	sbrs	r24, 1
     ad8:	bd c1       	rjmp	.+890    	; 0xe54 <vfprintf+0x398>
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	4c 01       	movw	r8, r24
     ae0:	f7 01       	movw	r30, r14
     ae2:	93 81       	ldd	r25, Z+3	; 0x03
     ae4:	f6 01       	movw	r30, r12
     ae6:	93 fd       	sbrc	r25, 3
     ae8:	85 91       	lpm	r24, Z+
     aea:	93 ff       	sbrs	r25, 3
     aec:	81 91       	ld	r24, Z+
     aee:	6f 01       	movw	r12, r30
     af0:	88 23       	and	r24, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <vfprintf+0x3a>
     af4:	ab c1       	rjmp	.+854    	; 0xe4c <vfprintf+0x390>
     af6:	85 32       	cpi	r24, 0x25	; 37
     af8:	39 f4       	brne	.+14     	; 0xb08 <vfprintf+0x4c>
     afa:	93 fd       	sbrc	r25, 3
     afc:	85 91       	lpm	r24, Z+
     afe:	93 ff       	sbrs	r25, 3
     b00:	81 91       	ld	r24, Z+
     b02:	6f 01       	movw	r12, r30
     b04:	85 32       	cpi	r24, 0x25	; 37
     b06:	29 f4       	brne	.+10     	; 0xb12 <vfprintf+0x56>
     b08:	b7 01       	movw	r22, r14
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     b10:	e7 cf       	rjmp	.-50     	; 0xae0 <vfprintf+0x24>
     b12:	51 2c       	mov	r5, r1
     b14:	31 2c       	mov	r3, r1
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	20 32       	cpi	r18, 0x20	; 32
     b1a:	a0 f4       	brcc	.+40     	; 0xb44 <vfprintf+0x88>
     b1c:	8b 32       	cpi	r24, 0x2B	; 43
     b1e:	69 f0       	breq	.+26     	; 0xb3a <vfprintf+0x7e>
     b20:	30 f4       	brcc	.+12     	; 0xb2e <vfprintf+0x72>
     b22:	80 32       	cpi	r24, 0x20	; 32
     b24:	59 f0       	breq	.+22     	; 0xb3c <vfprintf+0x80>
     b26:	83 32       	cpi	r24, 0x23	; 35
     b28:	69 f4       	brne	.+26     	; 0xb44 <vfprintf+0x88>
     b2a:	20 61       	ori	r18, 0x10	; 16
     b2c:	2c c0       	rjmp	.+88     	; 0xb86 <vfprintf+0xca>
     b2e:	8d 32       	cpi	r24, 0x2D	; 45
     b30:	39 f0       	breq	.+14     	; 0xb40 <vfprintf+0x84>
     b32:	80 33       	cpi	r24, 0x30	; 48
     b34:	39 f4       	brne	.+14     	; 0xb44 <vfprintf+0x88>
     b36:	21 60       	ori	r18, 0x01	; 1
     b38:	26 c0       	rjmp	.+76     	; 0xb86 <vfprintf+0xca>
     b3a:	22 60       	ori	r18, 0x02	; 2
     b3c:	24 60       	ori	r18, 0x04	; 4
     b3e:	23 c0       	rjmp	.+70     	; 0xb86 <vfprintf+0xca>
     b40:	28 60       	ori	r18, 0x08	; 8
     b42:	21 c0       	rjmp	.+66     	; 0xb86 <vfprintf+0xca>
     b44:	27 fd       	sbrc	r18, 7
     b46:	27 c0       	rjmp	.+78     	; 0xb96 <vfprintf+0xda>
     b48:	30 ed       	ldi	r19, 0xD0	; 208
     b4a:	38 0f       	add	r19, r24
     b4c:	3a 30       	cpi	r19, 0x0A	; 10
     b4e:	78 f4       	brcc	.+30     	; 0xb6e <vfprintf+0xb2>
     b50:	26 ff       	sbrs	r18, 6
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <vfprintf+0xa4>
     b54:	fa e0       	ldi	r31, 0x0A	; 10
     b56:	5f 9e       	mul	r5, r31
     b58:	30 0d       	add	r19, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	53 2e       	mov	r5, r19
     b5e:	13 c0       	rjmp	.+38     	; 0xb86 <vfprintf+0xca>
     b60:	8a e0       	ldi	r24, 0x0A	; 10
     b62:	38 9e       	mul	r3, r24
     b64:	30 0d       	add	r19, r0
     b66:	11 24       	eor	r1, r1
     b68:	33 2e       	mov	r3, r19
     b6a:	20 62       	ori	r18, 0x20	; 32
     b6c:	0c c0       	rjmp	.+24     	; 0xb86 <vfprintf+0xca>
     b6e:	8e 32       	cpi	r24, 0x2E	; 46
     b70:	21 f4       	brne	.+8      	; 0xb7a <vfprintf+0xbe>
     b72:	26 fd       	sbrc	r18, 6
     b74:	6b c1       	rjmp	.+726    	; 0xe4c <vfprintf+0x390>
     b76:	20 64       	ori	r18, 0x40	; 64
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <vfprintf+0xca>
     b7a:	8c 36       	cpi	r24, 0x6C	; 108
     b7c:	11 f4       	brne	.+4      	; 0xb82 <vfprintf+0xc6>
     b7e:	20 68       	ori	r18, 0x80	; 128
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <vfprintf+0xca>
     b82:	88 36       	cpi	r24, 0x68	; 104
     b84:	41 f4       	brne	.+16     	; 0xb96 <vfprintf+0xda>
     b86:	f6 01       	movw	r30, r12
     b88:	93 fd       	sbrc	r25, 3
     b8a:	85 91       	lpm	r24, Z+
     b8c:	93 ff       	sbrs	r25, 3
     b8e:	81 91       	ld	r24, Z+
     b90:	6f 01       	movw	r12, r30
     b92:	81 11       	cpse	r24, r1
     b94:	c1 cf       	rjmp	.-126    	; 0xb18 <vfprintf+0x5c>
     b96:	98 2f       	mov	r25, r24
     b98:	9f 7d       	andi	r25, 0xDF	; 223
     b9a:	95 54       	subi	r25, 0x45	; 69
     b9c:	93 30       	cpi	r25, 0x03	; 3
     b9e:	28 f4       	brcc	.+10     	; 0xbaa <vfprintf+0xee>
     ba0:	0c 5f       	subi	r16, 0xFC	; 252
     ba2:	1f 4f       	sbci	r17, 0xFF	; 255
     ba4:	ff e3       	ldi	r31, 0x3F	; 63
     ba6:	f9 83       	std	Y+1, r31	; 0x01
     ba8:	0d c0       	rjmp	.+26     	; 0xbc4 <vfprintf+0x108>
     baa:	83 36       	cpi	r24, 0x63	; 99
     bac:	31 f0       	breq	.+12     	; 0xbba <vfprintf+0xfe>
     bae:	83 37       	cpi	r24, 0x73	; 115
     bb0:	71 f0       	breq	.+28     	; 0xbce <vfprintf+0x112>
     bb2:	83 35       	cpi	r24, 0x53	; 83
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <vfprintf+0xfc>
     bb6:	5b c0       	rjmp	.+182    	; 0xc6e <vfprintf+0x1b2>
     bb8:	22 c0       	rjmp	.+68     	; 0xbfe <vfprintf+0x142>
     bba:	f8 01       	movw	r30, r16
     bbc:	80 81       	ld	r24, Z
     bbe:	89 83       	std	Y+1, r24	; 0x01
     bc0:	0e 5f       	subi	r16, 0xFE	; 254
     bc2:	1f 4f       	sbci	r17, 0xFF	; 255
     bc4:	44 24       	eor	r4, r4
     bc6:	43 94       	inc	r4
     bc8:	51 2c       	mov	r5, r1
     bca:	54 01       	movw	r10, r8
     bcc:	15 c0       	rjmp	.+42     	; 0xbf8 <vfprintf+0x13c>
     bce:	38 01       	movw	r6, r16
     bd0:	f2 e0       	ldi	r31, 0x02	; 2
     bd2:	6f 0e       	add	r6, r31
     bd4:	71 1c       	adc	r7, r1
     bd6:	f8 01       	movw	r30, r16
     bd8:	a0 80       	ld	r10, Z
     bda:	b1 80       	ldd	r11, Z+1	; 0x01
     bdc:	26 ff       	sbrs	r18, 6
     bde:	03 c0       	rjmp	.+6      	; 0xbe6 <vfprintf+0x12a>
     be0:	65 2d       	mov	r22, r5
     be2:	70 e0       	ldi	r23, 0x00	; 0
     be4:	02 c0       	rjmp	.+4      	; 0xbea <vfprintf+0x12e>
     be6:	6f ef       	ldi	r22, 0xFF	; 255
     be8:	7f ef       	ldi	r23, 0xFF	; 255
     bea:	c5 01       	movw	r24, r10
     bec:	2c 87       	std	Y+12, r18	; 0x0c
     bee:	0e 94 5e 07 	call	0xebc	; 0xebc <strnlen>
     bf2:	2c 01       	movw	r4, r24
     bf4:	83 01       	movw	r16, r6
     bf6:	2c 85       	ldd	r18, Y+12	; 0x0c
     bf8:	2f 77       	andi	r18, 0x7F	; 127
     bfa:	22 2e       	mov	r2, r18
     bfc:	17 c0       	rjmp	.+46     	; 0xc2c <vfprintf+0x170>
     bfe:	38 01       	movw	r6, r16
     c00:	f2 e0       	ldi	r31, 0x02	; 2
     c02:	6f 0e       	add	r6, r31
     c04:	71 1c       	adc	r7, r1
     c06:	f8 01       	movw	r30, r16
     c08:	a0 80       	ld	r10, Z
     c0a:	b1 80       	ldd	r11, Z+1	; 0x01
     c0c:	26 ff       	sbrs	r18, 6
     c0e:	03 c0       	rjmp	.+6      	; 0xc16 <vfprintf+0x15a>
     c10:	65 2d       	mov	r22, r5
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <vfprintf+0x15e>
     c16:	6f ef       	ldi	r22, 0xFF	; 255
     c18:	7f ef       	ldi	r23, 0xFF	; 255
     c1a:	c5 01       	movw	r24, r10
     c1c:	2c 87       	std	Y+12, r18	; 0x0c
     c1e:	0e 94 4c 07 	call	0xe98	; 0xe98 <strnlen_P>
     c22:	2c 01       	movw	r4, r24
     c24:	2c 85       	ldd	r18, Y+12	; 0x0c
     c26:	20 68       	ori	r18, 0x80	; 128
     c28:	22 2e       	mov	r2, r18
     c2a:	83 01       	movw	r16, r6
     c2c:	23 fc       	sbrc	r2, 3
     c2e:	1b c0       	rjmp	.+54     	; 0xc66 <vfprintf+0x1aa>
     c30:	83 2d       	mov	r24, r3
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	48 16       	cp	r4, r24
     c36:	59 06       	cpc	r5, r25
     c38:	b0 f4       	brcc	.+44     	; 0xc66 <vfprintf+0x1aa>
     c3a:	b7 01       	movw	r22, r14
     c3c:	80 e2       	ldi	r24, 0x20	; 32
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     c44:	3a 94       	dec	r3
     c46:	f4 cf       	rjmp	.-24     	; 0xc30 <vfprintf+0x174>
     c48:	f5 01       	movw	r30, r10
     c4a:	27 fc       	sbrc	r2, 7
     c4c:	85 91       	lpm	r24, Z+
     c4e:	27 fe       	sbrs	r2, 7
     c50:	81 91       	ld	r24, Z+
     c52:	5f 01       	movw	r10, r30
     c54:	b7 01       	movw	r22, r14
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     c5c:	31 10       	cpse	r3, r1
     c5e:	3a 94       	dec	r3
     c60:	f1 e0       	ldi	r31, 0x01	; 1
     c62:	4f 1a       	sub	r4, r31
     c64:	51 08       	sbc	r5, r1
     c66:	41 14       	cp	r4, r1
     c68:	51 04       	cpc	r5, r1
     c6a:	71 f7       	brne	.-36     	; 0xc48 <vfprintf+0x18c>
     c6c:	e5 c0       	rjmp	.+458    	; 0xe38 <vfprintf+0x37c>
     c6e:	84 36       	cpi	r24, 0x64	; 100
     c70:	11 f0       	breq	.+4      	; 0xc76 <vfprintf+0x1ba>
     c72:	89 36       	cpi	r24, 0x69	; 105
     c74:	39 f5       	brne	.+78     	; 0xcc4 <vfprintf+0x208>
     c76:	f8 01       	movw	r30, r16
     c78:	27 ff       	sbrs	r18, 7
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <vfprintf+0x1ce>
     c7c:	60 81       	ld	r22, Z
     c7e:	71 81       	ldd	r23, Z+1	; 0x01
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	0c 5f       	subi	r16, 0xFC	; 252
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	08 c0       	rjmp	.+16     	; 0xc9a <vfprintf+0x1de>
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	88 27       	eor	r24, r24
     c90:	77 fd       	sbrc	r23, 7
     c92:	80 95       	com	r24
     c94:	98 2f       	mov	r25, r24
     c96:	0e 5f       	subi	r16, 0xFE	; 254
     c98:	1f 4f       	sbci	r17, 0xFF	; 255
     c9a:	2f 76       	andi	r18, 0x6F	; 111
     c9c:	b2 2e       	mov	r11, r18
     c9e:	97 ff       	sbrs	r25, 7
     ca0:	09 c0       	rjmp	.+18     	; 0xcb4 <vfprintf+0x1f8>
     ca2:	90 95       	com	r25
     ca4:	80 95       	com	r24
     ca6:	70 95       	com	r23
     ca8:	61 95       	neg	r22
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	20 68       	ori	r18, 0x80	; 128
     cb2:	b2 2e       	mov	r11, r18
     cb4:	2a e0       	ldi	r18, 0x0A	; 10
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a4 01       	movw	r20, r8
     cba:	0e 94 9b 07 	call	0xf36	; 0xf36 <__ultoa_invert>
     cbe:	a8 2e       	mov	r10, r24
     cc0:	a8 18       	sub	r10, r8
     cc2:	44 c0       	rjmp	.+136    	; 0xd4c <vfprintf+0x290>
     cc4:	85 37       	cpi	r24, 0x75	; 117
     cc6:	29 f4       	brne	.+10     	; 0xcd2 <vfprintf+0x216>
     cc8:	2f 7e       	andi	r18, 0xEF	; 239
     cca:	b2 2e       	mov	r11, r18
     ccc:	2a e0       	ldi	r18, 0x0A	; 10
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	25 c0       	rjmp	.+74     	; 0xd1c <vfprintf+0x260>
     cd2:	f2 2f       	mov	r31, r18
     cd4:	f9 7f       	andi	r31, 0xF9	; 249
     cd6:	bf 2e       	mov	r11, r31
     cd8:	8f 36       	cpi	r24, 0x6F	; 111
     cda:	c1 f0       	breq	.+48     	; 0xd0c <vfprintf+0x250>
     cdc:	18 f4       	brcc	.+6      	; 0xce4 <vfprintf+0x228>
     cde:	88 35       	cpi	r24, 0x58	; 88
     ce0:	79 f0       	breq	.+30     	; 0xd00 <vfprintf+0x244>
     ce2:	b4 c0       	rjmp	.+360    	; 0xe4c <vfprintf+0x390>
     ce4:	80 37       	cpi	r24, 0x70	; 112
     ce6:	19 f0       	breq	.+6      	; 0xcee <vfprintf+0x232>
     ce8:	88 37       	cpi	r24, 0x78	; 120
     cea:	21 f0       	breq	.+8      	; 0xcf4 <vfprintf+0x238>
     cec:	af c0       	rjmp	.+350    	; 0xe4c <vfprintf+0x390>
     cee:	2f 2f       	mov	r18, r31
     cf0:	20 61       	ori	r18, 0x10	; 16
     cf2:	b2 2e       	mov	r11, r18
     cf4:	b4 fe       	sbrs	r11, 4
     cf6:	0d c0       	rjmp	.+26     	; 0xd12 <vfprintf+0x256>
     cf8:	8b 2d       	mov	r24, r11
     cfa:	84 60       	ori	r24, 0x04	; 4
     cfc:	b8 2e       	mov	r11, r24
     cfe:	09 c0       	rjmp	.+18     	; 0xd12 <vfprintf+0x256>
     d00:	24 ff       	sbrs	r18, 4
     d02:	0a c0       	rjmp	.+20     	; 0xd18 <vfprintf+0x25c>
     d04:	9f 2f       	mov	r25, r31
     d06:	96 60       	ori	r25, 0x06	; 6
     d08:	b9 2e       	mov	r11, r25
     d0a:	06 c0       	rjmp	.+12     	; 0xd18 <vfprintf+0x25c>
     d0c:	28 e0       	ldi	r18, 0x08	; 8
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	05 c0       	rjmp	.+10     	; 0xd1c <vfprintf+0x260>
     d12:	20 e1       	ldi	r18, 0x10	; 16
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <vfprintf+0x260>
     d18:	20 e1       	ldi	r18, 0x10	; 16
     d1a:	32 e0       	ldi	r19, 0x02	; 2
     d1c:	f8 01       	movw	r30, r16
     d1e:	b7 fe       	sbrs	r11, 7
     d20:	07 c0       	rjmp	.+14     	; 0xd30 <vfprintf+0x274>
     d22:	60 81       	ld	r22, Z
     d24:	71 81       	ldd	r23, Z+1	; 0x01
     d26:	82 81       	ldd	r24, Z+2	; 0x02
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	0c 5f       	subi	r16, 0xFC	; 252
     d2c:	1f 4f       	sbci	r17, 0xFF	; 255
     d2e:	06 c0       	rjmp	.+12     	; 0xd3c <vfprintf+0x280>
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 5f       	subi	r16, 0xFE	; 254
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	a4 01       	movw	r20, r8
     d3e:	0e 94 9b 07 	call	0xf36	; 0xf36 <__ultoa_invert>
     d42:	a8 2e       	mov	r10, r24
     d44:	a8 18       	sub	r10, r8
     d46:	fb 2d       	mov	r31, r11
     d48:	ff 77       	andi	r31, 0x7F	; 127
     d4a:	bf 2e       	mov	r11, r31
     d4c:	b6 fe       	sbrs	r11, 6
     d4e:	0b c0       	rjmp	.+22     	; 0xd66 <vfprintf+0x2aa>
     d50:	2b 2d       	mov	r18, r11
     d52:	2e 7f       	andi	r18, 0xFE	; 254
     d54:	a5 14       	cp	r10, r5
     d56:	50 f4       	brcc	.+20     	; 0xd6c <vfprintf+0x2b0>
     d58:	b4 fe       	sbrs	r11, 4
     d5a:	0a c0       	rjmp	.+20     	; 0xd70 <vfprintf+0x2b4>
     d5c:	b2 fc       	sbrc	r11, 2
     d5e:	08 c0       	rjmp	.+16     	; 0xd70 <vfprintf+0x2b4>
     d60:	2b 2d       	mov	r18, r11
     d62:	2e 7e       	andi	r18, 0xEE	; 238
     d64:	05 c0       	rjmp	.+10     	; 0xd70 <vfprintf+0x2b4>
     d66:	7a 2c       	mov	r7, r10
     d68:	2b 2d       	mov	r18, r11
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <vfprintf+0x2b6>
     d6c:	7a 2c       	mov	r7, r10
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <vfprintf+0x2b6>
     d70:	75 2c       	mov	r7, r5
     d72:	24 ff       	sbrs	r18, 4
     d74:	0d c0       	rjmp	.+26     	; 0xd90 <vfprintf+0x2d4>
     d76:	fe 01       	movw	r30, r28
     d78:	ea 0d       	add	r30, r10
     d7a:	f1 1d       	adc	r31, r1
     d7c:	80 81       	ld	r24, Z
     d7e:	80 33       	cpi	r24, 0x30	; 48
     d80:	11 f4       	brne	.+4      	; 0xd86 <vfprintf+0x2ca>
     d82:	29 7e       	andi	r18, 0xE9	; 233
     d84:	09 c0       	rjmp	.+18     	; 0xd98 <vfprintf+0x2dc>
     d86:	22 ff       	sbrs	r18, 2
     d88:	06 c0       	rjmp	.+12     	; 0xd96 <vfprintf+0x2da>
     d8a:	73 94       	inc	r7
     d8c:	73 94       	inc	r7
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <vfprintf+0x2dc>
     d90:	82 2f       	mov	r24, r18
     d92:	86 78       	andi	r24, 0x86	; 134
     d94:	09 f0       	breq	.+2      	; 0xd98 <vfprintf+0x2dc>
     d96:	73 94       	inc	r7
     d98:	23 fd       	sbrc	r18, 3
     d9a:	13 c0       	rjmp	.+38     	; 0xdc2 <vfprintf+0x306>
     d9c:	20 ff       	sbrs	r18, 0
     d9e:	06 c0       	rjmp	.+12     	; 0xdac <vfprintf+0x2f0>
     da0:	5a 2c       	mov	r5, r10
     da2:	73 14       	cp	r7, r3
     da4:	18 f4       	brcc	.+6      	; 0xdac <vfprintf+0x2f0>
     da6:	53 0c       	add	r5, r3
     da8:	57 18       	sub	r5, r7
     daa:	73 2c       	mov	r7, r3
     dac:	73 14       	cp	r7, r3
     dae:	68 f4       	brcc	.+26     	; 0xdca <vfprintf+0x30e>
     db0:	b7 01       	movw	r22, r14
     db2:	80 e2       	ldi	r24, 0x20	; 32
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	2c 87       	std	Y+12, r18	; 0x0c
     db8:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     dbc:	73 94       	inc	r7
     dbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     dc0:	f5 cf       	rjmp	.-22     	; 0xdac <vfprintf+0x2f0>
     dc2:	73 14       	cp	r7, r3
     dc4:	10 f4       	brcc	.+4      	; 0xdca <vfprintf+0x30e>
     dc6:	37 18       	sub	r3, r7
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <vfprintf+0x310>
     dca:	31 2c       	mov	r3, r1
     dcc:	24 ff       	sbrs	r18, 4
     dce:	12 c0       	rjmp	.+36     	; 0xdf4 <vfprintf+0x338>
     dd0:	b7 01       	movw	r22, r14
     dd2:	80 e3       	ldi	r24, 0x30	; 48
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	2c 87       	std	Y+12, r18	; 0x0c
     dd8:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     ddc:	2c 85       	ldd	r18, Y+12	; 0x0c
     dde:	22 ff       	sbrs	r18, 2
     de0:	17 c0       	rjmp	.+46     	; 0xe10 <vfprintf+0x354>
     de2:	21 ff       	sbrs	r18, 1
     de4:	03 c0       	rjmp	.+6      	; 0xdec <vfprintf+0x330>
     de6:	88 e5       	ldi	r24, 0x58	; 88
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <vfprintf+0x334>
     dec:	88 e7       	ldi	r24, 0x78	; 120
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	b7 01       	movw	r22, r14
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <vfprintf+0x350>
     df4:	82 2f       	mov	r24, r18
     df6:	86 78       	andi	r24, 0x86	; 134
     df8:	59 f0       	breq	.+22     	; 0xe10 <vfprintf+0x354>
     dfa:	21 fd       	sbrc	r18, 1
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <vfprintf+0x346>
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	01 c0       	rjmp	.+2      	; 0xe04 <vfprintf+0x348>
     e02:	8b e2       	ldi	r24, 0x2B	; 43
     e04:	27 fd       	sbrc	r18, 7
     e06:	8d e2       	ldi	r24, 0x2D	; 45
     e08:	b7 01       	movw	r22, r14
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     e10:	a5 14       	cp	r10, r5
     e12:	38 f4       	brcc	.+14     	; 0xe22 <vfprintf+0x366>
     e14:	b7 01       	movw	r22, r14
     e16:	80 e3       	ldi	r24, 0x30	; 48
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     e1e:	5a 94       	dec	r5
     e20:	f7 cf       	rjmp	.-18     	; 0xe10 <vfprintf+0x354>
     e22:	aa 94       	dec	r10
     e24:	f4 01       	movw	r30, r8
     e26:	ea 0d       	add	r30, r10
     e28:	f1 1d       	adc	r31, r1
     e2a:	80 81       	ld	r24, Z
     e2c:	b7 01       	movw	r22, r14
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     e34:	a1 10       	cpse	r10, r1
     e36:	f5 cf       	rjmp	.-22     	; 0xe22 <vfprintf+0x366>
     e38:	33 20       	and	r3, r3
     e3a:	09 f4       	brne	.+2      	; 0xe3e <vfprintf+0x382>
     e3c:	51 ce       	rjmp	.-862    	; 0xae0 <vfprintf+0x24>
     e3e:	b7 01       	movw	r22, r14
     e40:	80 e2       	ldi	r24, 0x20	; 32
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 69 07 	call	0xed2	; 0xed2 <fputc>
     e48:	3a 94       	dec	r3
     e4a:	f6 cf       	rjmp	.-20     	; 0xe38 <vfprintf+0x37c>
     e4c:	f7 01       	movw	r30, r14
     e4e:	86 81       	ldd	r24, Z+6	; 0x06
     e50:	97 81       	ldd	r25, Z+7	; 0x07
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <vfprintf+0x39c>
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	9f ef       	ldi	r25, 0xFF	; 255
     e58:	2c 96       	adiw	r28, 0x0c	; 12
     e5a:	e2 e1       	ldi	r30, 0x12	; 18
     e5c:	0c 94 15 08 	jmp	0x102a	; 0x102a <__epilogue_restores__>

00000e60 <calloc>:
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	cf 93       	push	r28
     e66:	df 93       	push	r29
     e68:	86 9f       	mul	r24, r22
     e6a:	80 01       	movw	r16, r0
     e6c:	87 9f       	mul	r24, r23
     e6e:	10 0d       	add	r17, r0
     e70:	96 9f       	mul	r25, r22
     e72:	10 0d       	add	r17, r0
     e74:	11 24       	eor	r1, r1
     e76:	c8 01       	movw	r24, r16
     e78:	0e 94 ab 03 	call	0x756	; 0x756 <malloc>
     e7c:	ec 01       	movw	r28, r24
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	29 f0       	breq	.+10     	; 0xe8c <calloc+0x2c>
     e82:	a8 01       	movw	r20, r16
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	0e 94 57 07 	call	0xeae	; 0xeae <memset>
     e8c:	ce 01       	movw	r24, r28
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	1f 91       	pop	r17
     e94:	0f 91       	pop	r16
     e96:	08 95       	ret

00000e98 <strnlen_P>:
     e98:	fc 01       	movw	r30, r24
     e9a:	05 90       	lpm	r0, Z+
     e9c:	61 50       	subi	r22, 0x01	; 1
     e9e:	70 40       	sbci	r23, 0x00	; 0
     ea0:	01 10       	cpse	r0, r1
     ea2:	d8 f7       	brcc	.-10     	; 0xe9a <strnlen_P+0x2>
     ea4:	80 95       	com	r24
     ea6:	90 95       	com	r25
     ea8:	8e 0f       	add	r24, r30
     eaa:	9f 1f       	adc	r25, r31
     eac:	08 95       	ret

00000eae <memset>:
     eae:	dc 01       	movw	r26, r24
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <memset+0x6>
     eb2:	6d 93       	st	X+, r22
     eb4:	41 50       	subi	r20, 0x01	; 1
     eb6:	50 40       	sbci	r21, 0x00	; 0
     eb8:	e0 f7       	brcc	.-8      	; 0xeb2 <memset+0x4>
     eba:	08 95       	ret

00000ebc <strnlen>:
     ebc:	fc 01       	movw	r30, r24
     ebe:	61 50       	subi	r22, 0x01	; 1
     ec0:	70 40       	sbci	r23, 0x00	; 0
     ec2:	01 90       	ld	r0, Z+
     ec4:	01 10       	cpse	r0, r1
     ec6:	d8 f7       	brcc	.-10     	; 0xebe <strnlen+0x2>
     ec8:	80 95       	com	r24
     eca:	90 95       	com	r25
     ecc:	8e 0f       	add	r24, r30
     ece:	9f 1f       	adc	r25, r31
     ed0:	08 95       	ret

00000ed2 <fputc>:
     ed2:	0f 93       	push	r16
     ed4:	1f 93       	push	r17
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	18 2f       	mov	r17, r24
     edc:	09 2f       	mov	r16, r25
     ede:	eb 01       	movw	r28, r22
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	81 fd       	sbrc	r24, 1
     ee4:	03 c0       	rjmp	.+6      	; 0xeec <fputc+0x1a>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	9f ef       	ldi	r25, 0xFF	; 255
     eea:	20 c0       	rjmp	.+64     	; 0xf2c <fputc+0x5a>
     eec:	82 ff       	sbrs	r24, 2
     eee:	10 c0       	rjmp	.+32     	; 0xf10 <fputc+0x3e>
     ef0:	4e 81       	ldd	r20, Y+6	; 0x06
     ef2:	5f 81       	ldd	r21, Y+7	; 0x07
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	42 17       	cp	r20, r18
     efa:	53 07       	cpc	r21, r19
     efc:	7c f4       	brge	.+30     	; 0xf1c <fputc+0x4a>
     efe:	e8 81       	ld	r30, Y
     f00:	f9 81       	ldd	r31, Y+1	; 0x01
     f02:	9f 01       	movw	r18, r30
     f04:	2f 5f       	subi	r18, 0xFF	; 255
     f06:	3f 4f       	sbci	r19, 0xFF	; 255
     f08:	39 83       	std	Y+1, r19	; 0x01
     f0a:	28 83       	st	Y, r18
     f0c:	10 83       	st	Z, r17
     f0e:	06 c0       	rjmp	.+12     	; 0xf1c <fputc+0x4a>
     f10:	e8 85       	ldd	r30, Y+8	; 0x08
     f12:	f9 85       	ldd	r31, Y+9	; 0x09
     f14:	81 2f       	mov	r24, r17
     f16:	09 95       	icall
     f18:	89 2b       	or	r24, r25
     f1a:	29 f7       	brne	.-54     	; 0xee6 <fputc+0x14>
     f1c:	2e 81       	ldd	r18, Y+6	; 0x06
     f1e:	3f 81       	ldd	r19, Y+7	; 0x07
     f20:	2f 5f       	subi	r18, 0xFF	; 255
     f22:	3f 4f       	sbci	r19, 0xFF	; 255
     f24:	3f 83       	std	Y+7, r19	; 0x07
     f26:	2e 83       	std	Y+6, r18	; 0x06
     f28:	81 2f       	mov	r24, r17
     f2a:	90 2f       	mov	r25, r16
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	08 95       	ret

00000f36 <__ultoa_invert>:
     f36:	fa 01       	movw	r30, r20
     f38:	aa 27       	eor	r26, r26
     f3a:	28 30       	cpi	r18, 0x08	; 8
     f3c:	51 f1       	breq	.+84     	; 0xf92 <__ultoa_invert+0x5c>
     f3e:	20 31       	cpi	r18, 0x10	; 16
     f40:	81 f1       	breq	.+96     	; 0xfa2 <__ultoa_invert+0x6c>
     f42:	e8 94       	clt
     f44:	6f 93       	push	r22
     f46:	6e 7f       	andi	r22, 0xFE	; 254
     f48:	6e 5f       	subi	r22, 0xFE	; 254
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	af 4f       	sbci	r26, 0xFF	; 255
     f52:	b1 e0       	ldi	r27, 0x01	; 1
     f54:	3e d0       	rcall	.+124    	; 0xfd2 <__ultoa_invert+0x9c>
     f56:	b4 e0       	ldi	r27, 0x04	; 4
     f58:	3c d0       	rcall	.+120    	; 0xfd2 <__ultoa_invert+0x9c>
     f5a:	67 0f       	add	r22, r23
     f5c:	78 1f       	adc	r23, r24
     f5e:	89 1f       	adc	r24, r25
     f60:	9a 1f       	adc	r25, r26
     f62:	a1 1d       	adc	r26, r1
     f64:	68 0f       	add	r22, r24
     f66:	79 1f       	adc	r23, r25
     f68:	8a 1f       	adc	r24, r26
     f6a:	91 1d       	adc	r25, r1
     f6c:	a1 1d       	adc	r26, r1
     f6e:	6a 0f       	add	r22, r26
     f70:	71 1d       	adc	r23, r1
     f72:	81 1d       	adc	r24, r1
     f74:	91 1d       	adc	r25, r1
     f76:	a1 1d       	adc	r26, r1
     f78:	20 d0       	rcall	.+64     	; 0xfba <__ultoa_invert+0x84>
     f7a:	09 f4       	brne	.+2      	; 0xf7e <__ultoa_invert+0x48>
     f7c:	68 94       	set
     f7e:	3f 91       	pop	r19
     f80:	2a e0       	ldi	r18, 0x0A	; 10
     f82:	26 9f       	mul	r18, r22
     f84:	11 24       	eor	r1, r1
     f86:	30 19       	sub	r19, r0
     f88:	30 5d       	subi	r19, 0xD0	; 208
     f8a:	31 93       	st	Z+, r19
     f8c:	de f6       	brtc	.-74     	; 0xf44 <__ultoa_invert+0xe>
     f8e:	cf 01       	movw	r24, r30
     f90:	08 95       	ret
     f92:	46 2f       	mov	r20, r22
     f94:	47 70       	andi	r20, 0x07	; 7
     f96:	40 5d       	subi	r20, 0xD0	; 208
     f98:	41 93       	st	Z+, r20
     f9a:	b3 e0       	ldi	r27, 0x03	; 3
     f9c:	0f d0       	rcall	.+30     	; 0xfbc <__ultoa_invert+0x86>
     f9e:	c9 f7       	brne	.-14     	; 0xf92 <__ultoa_invert+0x5c>
     fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <__ultoa_invert+0x58>
     fa2:	46 2f       	mov	r20, r22
     fa4:	4f 70       	andi	r20, 0x0F	; 15
     fa6:	40 5d       	subi	r20, 0xD0	; 208
     fa8:	4a 33       	cpi	r20, 0x3A	; 58
     faa:	18 f0       	brcs	.+6      	; 0xfb2 <__ultoa_invert+0x7c>
     fac:	49 5d       	subi	r20, 0xD9	; 217
     fae:	31 fd       	sbrc	r19, 1
     fb0:	40 52       	subi	r20, 0x20	; 32
     fb2:	41 93       	st	Z+, r20
     fb4:	02 d0       	rcall	.+4      	; 0xfba <__ultoa_invert+0x84>
     fb6:	a9 f7       	brne	.-22     	; 0xfa2 <__ultoa_invert+0x6c>
     fb8:	ea cf       	rjmp	.-44     	; 0xf8e <__ultoa_invert+0x58>
     fba:	b4 e0       	ldi	r27, 0x04	; 4
     fbc:	a6 95       	lsr	r26
     fbe:	97 95       	ror	r25
     fc0:	87 95       	ror	r24
     fc2:	77 95       	ror	r23
     fc4:	67 95       	ror	r22
     fc6:	ba 95       	dec	r27
     fc8:	c9 f7       	brne	.-14     	; 0xfbc <__ultoa_invert+0x86>
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	61 05       	cpc	r22, r1
     fce:	71 05       	cpc	r23, r1
     fd0:	08 95       	ret
     fd2:	9b 01       	movw	r18, r22
     fd4:	ac 01       	movw	r20, r24
     fd6:	0a 2e       	mov	r0, r26
     fd8:	06 94       	lsr	r0
     fda:	57 95       	ror	r21
     fdc:	47 95       	ror	r20
     fde:	37 95       	ror	r19
     fe0:	27 95       	ror	r18
     fe2:	ba 95       	dec	r27
     fe4:	c9 f7       	brne	.-14     	; 0xfd8 <__ultoa_invert+0xa2>
     fe6:	62 0f       	add	r22, r18
     fe8:	73 1f       	adc	r23, r19
     fea:	84 1f       	adc	r24, r20
     fec:	95 1f       	adc	r25, r21
     fee:	a0 1d       	adc	r26, r0
     ff0:	08 95       	ret

00000ff2 <__prologue_saves__>:
     ff2:	2f 92       	push	r2
     ff4:	3f 92       	push	r3
     ff6:	4f 92       	push	r4
     ff8:	5f 92       	push	r5
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	ca 1b       	sub	r28, r26
    101c:	db 0b       	sbc	r29, r27
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	09 94       	ijmp

0000102a <__epilogue_restores__>:
    102a:	2a 88       	ldd	r2, Y+18	; 0x12
    102c:	39 88       	ldd	r3, Y+17	; 0x11
    102e:	48 88       	ldd	r4, Y+16	; 0x10
    1030:	5f 84       	ldd	r5, Y+15	; 0x0f
    1032:	6e 84       	ldd	r6, Y+14	; 0x0e
    1034:	7d 84       	ldd	r7, Y+13	; 0x0d
    1036:	8c 84       	ldd	r8, Y+12	; 0x0c
    1038:	9b 84       	ldd	r9, Y+11	; 0x0b
    103a:	aa 84       	ldd	r10, Y+10	; 0x0a
    103c:	b9 84       	ldd	r11, Y+9	; 0x09
    103e:	c8 84       	ldd	r12, Y+8	; 0x08
    1040:	df 80       	ldd	r13, Y+7	; 0x07
    1042:	ee 80       	ldd	r14, Y+6	; 0x06
    1044:	fd 80       	ldd	r15, Y+5	; 0x05
    1046:	0c 81       	ldd	r16, Y+4	; 0x04
    1048:	1b 81       	ldd	r17, Y+3	; 0x03
    104a:	aa 81       	ldd	r26, Y+2	; 0x02
    104c:	b9 81       	ldd	r27, Y+1	; 0x01
    104e:	ce 0f       	add	r28, r30
    1050:	d1 1d       	adc	r29, r1
    1052:	0f b6       	in	r0, 0x3f	; 63
    1054:	f8 94       	cli
    1056:	de bf       	out	0x3e, r29	; 62
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	cd bf       	out	0x3d, r28	; 61
    105c:	ed 01       	movw	r28, r26
    105e:	08 95       	ret

00001060 <_exit>:
    1060:	f8 94       	cli

00001062 <__stop_program>:
    1062:	ff cf       	rjmp	.-2      	; 0x1062 <__stop_program>
